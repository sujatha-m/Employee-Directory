{"version":3,"sources":["utils/API.js","components/Sort/index.js","components/Filter/index.js","components/SearchBox/index.js","components/TableData/index.js","components/Header/index.js","components/Footer/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["getEmployees","axios","get","SortDropDown","handleSelect","DropdownButton","alignRight","title","id","onSelect","Dropdown","Item","eventKey","FilterDropDown","SearchBox","props","useState","val","setValue","e","console","log","invokeDropDownCBs","className","onChange","handleInputChange","value","type","name","list","placeholder","onClick","handleSearch","Sort","Filter","TableData","results","map","result","key","login","uuid","src","picture","medium","alt","data-th","first","last","dob","age","cell","href","email","gender","nat","Header","Footer","Container","state","search","employees","filteredEmployees","order","employeeSearch","API","getUsers","then","res","setState","data","catch","err","event","preventDefault","alert","filter","employee","toLowerCase","includes","UserInput","target","indexOf","sortByFirstName","sorteds","sort","a","b","sortByAge","filterByGender","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ac87fd70.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst BASEURL = 'https://randomuser.me/api/?results=100&nat=us,dk,fr,gb'\r\n\r\nexport default {\r\n    //Gets all employees table data from randomuser\r\n    getEmployees: function () {\r\n        return axios.get(BASEURL)\r\n    }\r\n}","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\n/* simple component to handle dropdown menu which sorts employees by first name \r\n * and age\r\n */\r\nconst SortDropDown = ({handleSelect}) => (\r\n  <DropdownButton\r\n  alignRight\r\n  title=\"Sort By\"\r\n  id=\"dropdown-menu-align-right\"\r\n  onSelect={handleSelect}\r\n    >\r\n          <Dropdown.Item eventKey=\"FirstName\">First Name</Dropdown.Item>\r\n          <Dropdown.Item eventKey=\"Age\">Age</Dropdown.Item>\r\n  </DropdownButton>\r\n);\r\n\r\nexport default SortDropDown;","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\n/* simple component to handle dropdown menu which filters employees by gender */\r\nconst FilterDropDown = ({handleSelect}) => (\r\n  <DropdownButton\r\n  alignRight\r\n  title=\"Filter By Gender\"\r\n  id=\"dropdown-menu-align-right\"\r\n  onSelect={handleSelect}\r\n    >\r\n          <Dropdown.Item eventKey=\"Female\">Female</Dropdown.Item>\r\n          <Dropdown.Item eventKey=\"Male\">Male</Dropdown.Item>\r\n  </DropdownButton>\r\n);\r\n\r\nexport default FilterDropDown;","import React , { useState }from 'react'\r\nimport SortDropDown from '../Sort/index'\r\nimport FilterDropDown from '../Filter/index'\r\n\r\nimport './style.css'\r\n\r\n/* component to handle searching of employee names from the employee directory\r\n  * also holds the child components for sorting and filter dropdown menu of employee\r\n  * fields\r\n */\r\nfunction SearchBox (props) {\r\n  const [val,setValue] = useState('');\r\n\r\n  /* function to handle dropdown value selected by user\r\n   * and invoke the callback function in Container component\r\n   * to handle sorting and filtering of employee fields based on value\r\n   */\r\n  const handleSelect = (e)=>{\r\n    console.log(e);\r\n    setValue(e)\r\n    props.invokeDropDownCBs(e)\r\n  }\r\n  \r\n  return (\r\n    <div className='input-group mb-3'>\r\n      <input\r\n        onChange={props.handleInputChange}\r\n        value={props.value}\r\n        id='employees'\r\n        type='text'\r\n        name='search'\r\n        list='employee'\r\n        // className=' inputBox'\r\n        className='form-control mr-sm-2'\r\n        placeholder='Search by name'\r\n      />\r\n\r\n      <div className='input-group-append'>\r\n        <button\r\n          type='submit'\r\n          value=''\r\n          // className=' btn z-depth-2 waves-effect  searchBttn'\r\n          className='btn my-2 my-sm-0 bg-primary'\r\n          onClick={props.handleSearch}\r\n        >\r\n          Search\r\n        </button>&nbsp;&nbsp;&nbsp;\r\n      </div>\r\n      <SortDropDown\r\n      handleSelect = {handleSelect}\r\n      val = {val}\r\n      />&nbsp;&nbsp;&nbsp;\r\n      <FilterDropDown\r\n      handleSelect = {handleSelect}\r\n      val = {val}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default SearchBox\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\n/* Table component which holds the employee fields to be displayed from \r\n * the directory\r\n*/\r\nfunction TableData(props){\r\n    return (\r\n        <div className = \"container-fluid\">\r\n        <table className = 'tableEmployee col-12'>\r\n            <thead>\r\n                <tr>\r\n                <th>Image</th>\r\n                <th>Name</th>\r\n                <th>Age</th>\r\n                 <th>Phone</th>\r\n                 <th>E-mail</th>\r\n                 <th>Gender</th>\r\n                 <th>Country</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody className= \"\">\r\n                {props.results.map(result => (\r\n                    <tr className=\"table\" key={result.login.uuid}>                 \r\n                        <td> <img className=\"align-middle\"src={result.picture.medium} alt=\"\" /></td>                 \r\n                        <td data-th=\"Name\" className=\"name-cell align-middle\">{result.name.first + \" \" + result.name.last}  </td>\r\n                        <td className=\"align-middle\">{result.dob.age}</td>\r\n                        <td className=\"align-middle\">{result.cell}</td>\r\n                        <td className=\"align-middle\"><a href={result.email}>{result.email}</a></td>\r\n                        <td className=\"align-middle\">{result.gender}</td>\r\n                        <td className=\"align-middle\">{result.nat}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableData","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"header\" >\r\n        <h1 className=\"headerText\">Employee Directory</h1>\r\n      </header>\r\n\r\n    )\r\n  }\r\n  \r\n  export default Header;\r\n  ","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>React Employee Directory 2020</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import API from '../../utils/API';\r\nimport React, { Component } from 'react';\r\nimport SearchBox from '../SearchBox/index'\r\nimport TableData from '../TableData/index'\r\nimport Header from '../Header/index';\r\nimport Footer from '../Footer/index';\r\nimport './style.css'\r\n\r\nclass Container extends Component {\r\n    //setting the component's initial state\r\n    //search starts as an empty string\r\n    state = {\r\n        search: '',\r\n        employees:[],\r\n        filteredEmployees:[],\r\n        order:'asc'\r\n    }\r\n\r\n    // initialization function which extracts the employees directory from randomuser API \r\n    // when page is first loaded\r\n    componentDidMount(){\r\n        API.getEmployees().then(res => this.setState({\r\n            employees: res.data.results,\r\n            filteredEmployees: res.data.results\r\n        })).catch(err => console.log(err))\r\n  \r\n    }\r\n\r\n     //API call triggered when page is refreshed and  when application is loaded \r\n     employeeSearch = () => {\r\n        API.getUsers()\r\n            .then(res => this.setState({\r\n\r\n                //change their both states to hold all the data from the API call(all employees) and will be passed down trough props like that\r\n                //employee will remain the same and filteredEmployes will be changed and passed down during application's life. Employee will always hold all employess.\r\n                filteredEmployees: res.data.results,\r\n                employees: res.data.results\r\n            }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    //function that handles the employees search when search button is clicked\r\n    handleSearch = event => {\r\n        event.preventDefault();\r\n        if (!this.state.search) {\r\n            alert(\"Enter a name\")\r\n        }\r\n        const { employees, search } = this.state;\r\n\r\n        //filters the object looking for the value that matches the value entered in the input box by the user  (search.this.state)\r\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\r\n\r\n        this.setState({\r\n            filteredEmployees\r\n        });\r\n    }\r\n\r\n    //when input is changing it will dynamically show the employees names that match in the screen\r\n    handleInputChange = event => {\r\n        const employees = this.state.employees;\r\n        const UserInput = event.target.value;\r\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) !== -1 )\r\n        this.setState({\r\n            //change the state of  filteredEmployes now it holds all the employes that matches users\r\n            // search and will be passed down in this state\r\n            filteredEmployees\r\n        });\r\n    };\r\n\r\n    //function that sorts the selected firstname value from drop down menu and\r\n    //sets the filteredEmployees state to sorted array to be displayed\r\n    //in the table\r\n    sortByFirstName = () => {\r\n        const filtereds = this.state.filteredEmployees\r\n        const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\r\n        //console.log(sorteds)\r\n\r\n        this.setState({\r\n            filteredEmployees: sorteds\r\n        })\r\n    }\r\n\r\n    //function that sorts the selected age value from drop down menu and\r\n    //sets the filteredEmployees state to sorted array to be displayed\r\n    //in the table\r\n    sortByAge = () => {\r\n        const filtereds = this.state.filteredEmployees\r\n        const sorteds = filtereds.sort((a, b) => (a.dob.age < b.dob.age) ? -1 : 1)\r\n        //console.log(sorteds)\r\n        this.setState({\r\n            filteredEmployees: sorteds\r\n        })  \r\n    }\r\n\r\n    //function that filters the selected gender value from drop down menu and\r\n    //sets the filteredEmployees state to filtered array to be displayed\r\n    //in the table\r\n    filterByGender = (gender) => {\r\n        console.log(gender.toLowerCase())\r\n        const filtereds =this.state.employees\r\n        //filters the object looking for the value that matches the value selected\r\n        //in the dropdown menu\r\n        const sorteds = filtereds.filter(a => a.gender.toLowerCase() === gender.toLowerCase())\r\n        this.setState({\r\n            filteredEmployees: sorteds\r\n        })\r\n    }\r\n\r\n    /* callback function passed to 'search' child component to\r\n     * assist dropdown menu filter and sort functionalities\r\n     */ \r\n    invokeDropDownCBs = (val) => {\r\n        if(val === 'FirstName') {\r\n            this.sortByFirstName()\r\n        } else if(val === 'Age') {\r\n                this.sortByAge()\r\n        } else if((val === 'Male') || (val === 'Female')) {\r\n            this.filterByGender(val)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <SearchBox\r\n                    employee={this.state.employees}\r\n                    handleSearch={this.handleSearch}\r\n                    invokeDropDownCBs={this.invokeDropDownCBs}\r\n                    handleInputChange={this.handleInputChange} />\r\n                <TableData results={this.state.filteredEmployees} \r\n                    />\r\n                <Footer/>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container","import React from 'react';\nimport Container from './components/Container/index'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container/>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}